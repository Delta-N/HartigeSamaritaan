name: Build and publish

on:
  push:
    branches: [ refactor-ui ]

env:
  BUILD_CONFIGURATION: Release
  DOTNET_VERSION: 3.1.x
  AZURE_WEBAPP_PACKAGE_PATH: ./RoosterPlanner.UI/
  AZURE_WEBAPP_NAME: roosterplanner-web-dev
  #AZURE_API_PACKAGE_PATH: ./RoosterPlanner.UI/
  AZURE_API_NAME: roosterplanner-api-dev

  #Todo: Create resource groups and resources
  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
          
      - name: cache 
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ~/cache
            !~/cache/exclude
            **/node_modules
            ${{ env.AZURE_WEBAPP_PACKAGE_PATH  }}/.node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-    

      - name: Setup .NET core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{env.DOTNET_VERSION}}

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 12.18.3
      
      - name: build front-end    
        run: | 
          npm install
          npm install -g @angular/cli > /dev/null
          ng build --prod --outputPath=./staging
        working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH  }}
        
      - name: move staging
        run: |
          mv ./${{ env.AZURE_WEBAPP_PACKAGE_PATH  }}staging ./
      
      - name: upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: front-end
          path: ./${{ env.AZURE_WEBAPP_PACKAGE_PATH  }}staging
            
      - name: upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: front-end2
          path: ./staging     
        
      - name: publish front-end
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE  }}
          package: ./staging/web/dist/src
          
      - name: build API
        run: |
          dotnet restore
          dotnet build --configuration ${{ env.BUILD_CONFIGURATION  }}
          dotnet publish -c ${{ env.BUILD_CONFIGURATION  }} -o output ./staging/api
          
      - name: publish api
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_API_NAME }}
          publish-profile: ${{ secrets.AZURE_API_PUBLISH_PROFILE  }}
          package: ./staging/api
        

        


  

