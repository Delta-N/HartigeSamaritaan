name: Build the project

on:
  push:
    branches:
      - main
      - develop

env:
  BUILD_CONFIGURATION: Release
  DOTNET_VERSION: 5.0.x
  NODE_VERSION: 14.15.1
  AZURE_WEBAPP_PACKAGE_PATH: ./RoosterPlanner.UI/
  AZURE_API_PACKAGE_PATH: ./RoosterPlanner.Api/

jobs:
  build-front-end: 
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v2
          
      - name: cache 
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ~/cache
            !~/cache/exclude
            **/node_modules
            ${{ env.AZURE_WEBAPP_PACKAGE_PATH  }}/.node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: build front-end
        run: |
          npm install
          npm install --global @angular/cli@15.2.10
          ng build --prod --outputPath=../staging/web
        working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH  }}
        
      - name: zip the output
        run: |
          Compress-Archive -Path .\staging\web\* -DestinationPath .\staging\web.zip
        shell: pwsh

      - uses: actions/upload-artifact@v2
        with:
          name: "Web"
          path: ./staging/web.zip
  
  build-back-end:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        
      - name: Setup .NET core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{env.DOTNET_VERSION}}

      - name: build API
        run: |
          dotnet build --configuration ${{ env.BUILD_CONFIGURATION  }}
        working-directory: ${{ env.AZURE_API_PACKAGE_PATH  }}
        
      - name: test API
        run: |
          dotnet test --configuration ${{ env.BUILD_CONFIGURATION  }} --collect "Code coverage" --logger trx
        working-directory: ${{ env.AZURE_API_PACKAGE_PATH  }}
        
      - name: publish API
        run: |
          dotnet publish --configuration ${{ env.BUILD_CONFIGURATION  }} --no-build --no-restore --output ../staging/api
        working-directory: ${{ env.AZURE_API_PACKAGE_PATH  }}
        
      - name: zip the output
        run: |
          Compress-Archive -Path .\staging\api\* -DestinationPath .\staging\api.zip
        shell: pwsh
        
      - uses: actions/upload-artifact@v2
        with:
          name: "Api"
          path: ./staging/api.zip  
