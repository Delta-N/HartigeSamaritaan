name: Build and Deploy

on:
  push:
    branches:
      - develop #["main", "develop"]#

env:
  BUILD_CONFIGURATION: Release
  DOTNET_VERSION: 8.0.x
  NODE_VERSION: 20.x
  ANGULAR_VERSION: 18.0.3
  PNPM_VERSION: 8
  AZURE_WEBAPP_PACKAGE_PATH: ./RoosterPlanner.UI/
  AZURE_API_PACKAGE_PATH: ./RoosterPlanner.Api/

jobs:
  build-front-end:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name == 'main' && 'prd' || github.ref_name == 'develop' && 'dev' }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{env.NODE_VERSION}}

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-


      - name: Install Angular CLI
        run: pnpm add -g @angular/cli@${{ env.ANGULAR_VERSION }}

      - name: Build front-end
        run: |
          pnpm install
          ng build --configuration ${{ github.ref_name == 'main' && 'production' || github.ref_name == 'develop' && 'staging' }} --output-path=../staging/web
        working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Install zip
        uses: montudor/action-zip@v1

      - name: Zip output
        run: zip -qq -r ../../web.zip .
        working-directory: ./staging/web

      - uses: actions/upload-artifact@v4
        with:
          name: Web
          path: web.zip

      - name: Log in with Azure
        uses: azure/login@v2
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          enable-AzPSSession: true

      - name: deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{secrets.AZURE_WEB_RESOURCE_NAME}}
          resource-group: ${{secrets.AZURE_RG_NAME}}
          package: 'web.zip'

  build-back-end:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name == 'main' && 'prd' || github.ref_name == 'develop' && 'dev' || 'other' }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build API
        run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }}
        working-directory: ${{ env.AZURE_API_PACKAGE_PATH }}

      - name: Publish API
        run: dotnet publish --configuration ${{ env.BUILD_CONFIGURATION }} --output ../staging/api -r linux-x64
        working-directory: ${{ env.AZURE_API_PACKAGE_PATH }}

      - name: Test API
        run: dotnet test --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore --collect "Code coverage" --logger trx
        working-directory: ${{ env.AZURE_API_PACKAGE_PATH }}

      - name: Install zip
        uses: montudor/action-zip@v1

      - uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.AZURE_API_PACKAGE_PATH }}api/appSettings.json
        env:
          KeyVaultName: ${{ secrets.AZURE_KEYVAULT_NAME }}

      - name: Zip output
        run: zip -qq -r ../../api.zip .
        working-directory: ./staging/api

      - uses: actions/upload-artifact@v4
        with:
          name: Api
          path: api.zip

      - name: Log in with Azure
        uses: azure/login@v2
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          enable-AzPSSession: true

      - name: deploy
        uses: azure/webapps-deploy@v2
        with:
            app-name: ${{secrets.AZURE_API_RESOURCE_NAME}}
            resource-group: ${{secrets.AZURE_RG_NAME}}
            package: 'api.zip'
