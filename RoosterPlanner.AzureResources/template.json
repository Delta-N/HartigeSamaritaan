{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  
  "parameters": {
    "environment": {
      "type": "string",
      "minLength": 3,
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "tst",
        "prd"
      ]
    },
    "administratorLogin": {
      "type": "string",
      "minLength": 2,
      "defaultValue": "deltan"
    },
    "administratorLoginPassword": { 
      "type": "securestring", 
      "minLength": 2,
      "defaultValue": "[concat('P', uniqueString(resourceGroup().id, '224F5A8B-51DB-46A3-A7C8-59B0DD584A41'), 'x', '!')]"
    }
  },
  
  "variables": {
    "productName": "roosterplanner",
    
    "apiName": "[concat(variables('productName'), '-api-', parameters('environment'))]",
    "webSiteName": "[concat(variables('productName'), '-web-', parameters('environment'))]",
    "appInsight": "[concat(variables('productName'), '-insights-', parameters('environment'))]",
    "hostingPlanName": "[concat(variables('productName'), '-plan-', parameters('environment'))]",
   
    // KeyVault
    "keyVaultSettings": {
      "name": "[concat(variables('productName'), '-kv-', parameters('environment'))]" 
    },
    
    //database

    "databaseSkuName": {
      "dev": "Basic",
      "acc": "Basic",
      "prd": "S0"
    },
    "databaseTierEdition": {
      "dev": "Basic",
      "acc": "Basic",
      "prd": "Standard"
    },
    "databaseCapacity": {
      "dev": 5,
      "acc": 5,
      "prd": 10
    },
    
    "databaseSettings": {
      "name": "[concat(variables('productName'), '-sqldb-', parameters('environment'))]",
      "sqlserverName": "[concat(variables('productName'), '-sqlserver-', parameters('environment'))]",
      "collation": "SQL_Latin1_General_CP1_CI_AS",
      "edition": "Basic",
      "maxSizeBytes": "1073741824",
      "requestedServiceObjectiveName": "Basic",
      "dbSKUName": "[variables('databaseSkuName')[parameters('environment')]]",
      "dbSKUTier": "[variables('databaseTierEdition')[parameters('environment')]]",
      "dbSKUCapacity": "[variables('databaseCapacity')[parameters('environment')]]"
    },
    
    // ServicePlan
    "servicePlanTierEnvironment": {
      "dev": "Free",
      "tst": "Shared",
      "prd": "Basic"
    },
    "servicePlanSizeEnvironment": {
      "dev": "F1",
      "tst": "D1",
      "prd": "B1"
    },
    "servicePlanFamilyEnvironment": {
      "dev": "F",
      "tst": "D",
      "prd": "B"
    },
    "servicePlanCapacity": {
      "dev": "1",
      "tst": "1",
      "prd": "1"
    },
    "servicePlan": {
      "SKUFamily": "[variables('servicePlanFamilyEnvironment')[parameters('environment')]]",
      "SKUTier": "[variables('servicePlanTierEnvironment')[parameters('environment')]]",
      "SKUSize": "[variables('servicePlanSizeEnvironment')[parameters('environment')]]",
      "SKUCapacity": "[variables('servicePlanCapacity')[parameters('environment')]]"
    },
    "storageTypeEnvironment": {
      "dev": "Standard_LRS",
      "acc": "Standard_LRS",
      "prd": "Standard_ZRS"
    },
    "storageTierEnvironment": {
      "dev": "Standard",
      "acc": "Standard",
      "prd": "Standard"
    },
    "storageSettings": {
      "name": "[concat(variables('productName'), 'storage',parameters('environment'))]",
      "tier": "[variables('storageTierEnvironment')[parameters('environment')]]",
      "type": "[variables('storageTypeEnvironment')[parameters('environment')]]"
    },
    
    "webApplication": {
      "alwaysOn": "[if(equals(parameters('environment'), 'prd'), bool('true'), bool('false'))]",
      "use32Bit": "true",
      "aspNetCoreEnvironment": "Production"
    },
    
    //manually add custom domain in the portal
    "cors": {
      "dev": "[concat('https://', variables('webSiteName'), '.', 'azurewebsites.net')]",
      "tst": "[concat('https://', variables('webSiteName'), '.', 'azurewebsites.net')]",
      "prd": "[concat('https://', variables('webSiteName'), '.', 'azurewebsites.net')]"
    }
  },
  
  "resources": [
    //sqlserver
    {
      "name": "[variables('databaseSettings').sqlserverName]",
      "type": "Microsoft.Sql/servers",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "SqlServer"
      },
      "apiVersion": "2020-02-02-preview",
      "properties": {
        "administratorLogin": "[parameters('administratorLogin')]",
        "administratorLoginPassword": "[parameters('administratorLoginPassword')]"
      },
      "resources": [
        {
          "name": "[variables('databaseSettings').name]",
          "type": "databases",
          "location": "[resourceGroup().location]",
          "tags": {
            "displayName": "Database"
          },
          "apiVersion": "2020-08-01-preview",
          "sku": {
            "name": "[variables('databaseSettings').dbSKUName]",
            "tier": "[variables('databaseSettings').dbSKUTier]",
            "capacity": "[variables('databaseSettings').dbSKUCapacity]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers/', variables('databaseSettings').sqlserverName)]"
          ],
          "properties": {
            "edition": "[variables('databaseSettings').edition]",
            "collation": "[variables('databaseSettings').collation]",
            "maxSizeBytes": "[variables('databaseSettings').maxSizeBytes]",
            "requestedServiceObjectiveName": "[variables('databaseSettings').requestedServiceObjectiveName]"
          }
        },
        {
          "type": "firewallrules",
          "apiVersion": "2015-05-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers/', variables('databaseSettings').sqlserverName)]"
          ],
          "location": "[resourceGroup().location]",
          "name": "AllowAllWindowsAzureIps",
          "properties": {
            "endIpAddress": "0.0.0.0",
            "startIpAddress": "0.0.0.0"
          }
        },
        {
          "name": "Delta-N Kantoor",
          "type": "firewallRules",
          "apiVersion": "2015-05-01-preview",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers/', variables('databaseSettings').sqlserverName)]"
          ],
          "properties": {
            "startIpAddress": "185.127.110.82",
            "endIpAddress": "185.127.110.82"
          }
        },
        {
          "name": "Jaap huis",
          "type": "firewallRules",
          "apiVersion": "2015-05-01-preview",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers/', variables('databaseSettings').sqlserverName)]"
          ],
          "properties": {
            "startIpAddress": "94.210.15.37",
            "endIpAddress": "94.210.15.37"
          }
        }
      ]
    },
    //hosting plan
    {
      "apiVersion": "2020-09-01", //checken of up to date
      "name": "[variables('hostingPlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "kind": "app",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "HostingPlan"
      },
      "sku": {
        "name": "[variables('servicePlan').SKUSize]",
        "tier": "[variables('servicePlan').SKUTier]",
        "size": "[variables('servicePlan').SKUSize]",
        "family": "[variables('servicePlan').SKUFamily]",
        "capacity": "[variables('servicePlan').SKUCapacity]"
      },
      "properties": {
        "name": "[variables('hostingPlanName')]",
        "perSiteScaling": true,
        "maximumElasticWorkerCount": 1 //maximum elastic ...?
      }
    },
    //api
    {
      "apiVersion": "2020-09-01",
      "name": "[variables('apiName')]",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverFarms/', variables('hostingPlanName'))]"
      ],
      "tags": {
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "empty",
        "displayName": "Api"
      },
      "properties": {
        "name": "[variables('apiName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "defaultDocuments": [
            "index.html",
            "default.html",
            "index.aspx"
          ],
          "phpVersion": "off",
          "javaVersion": null,
          "alwaysOn": "[variables('webApplication').alwaysOn]",
          "remoteDebuggingEnabled": false,
          "remoteDebuggingVersion": "VS2019",
          "localMySqlEnabled": false,
          "cors": {
            "allowedOrigins": [
              "[variables('cors')[parameters('environment')]]"
            ],
            "supportCredentials": true
          },
          "netFrameworkVersion": "v5.0",
          "metadata": [
            {
              "name": "CURRENT_STACK",
              "value": "dotnet"
            }
          ]
        },
        "clientAffinityEnabled": false,
        "httpsOnly": true,
        "minTlsVersion": "1.2"
      },
      "resources": [
        {
          // Application settings
          "apiVersion": "2020-09-01",
          "type": "Microsoft.Web/sites/config",
          "name": "[concat(variables('apiName'), '/appsettings')]",
          //nested resource name must include parent
          "comments": "Application settings",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/', variables('apiName'))]",
            "[resourceId('Microsoft.Insights/Components/', variables('appInsight'))]"
          ],
          "properties": {
            "WEBSITE_TIME_ZONE": "[concat('W. Europe Standard Time')]",
            "ASPNETCORE_ENVIRONMENT": "[parameters('environment')]",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('appInsight')), '2020-02-02-preview').InstrumentationKey]"
          }
        }
      ]
    },
    //website
    {
      "apiVersion": "2020-09-01",
      "name": "[variables('webSiteName')]",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverFarms/', variables('hostingPlanName'))]"
      ],
      "tags": {
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "empty",
        "displayName": "Website"
      },
      "properties": {
        "name": "[variables('webSiteName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "defaultDocuments": [
            "index.html",
            "default.html",
            "index.aspx"
          ],
          "phpVersion": "off",
          "javaVersion": null,
          "alwaysOn": "[variables('webApplication').alwaysOn]",
          "remoteDebuggingEnabled": false,
          "remoteDebuggingVersion": "VS2019",
          "localMySqlEnabled": false,
          "netFrameworkVersion": "v5.0",
          "metadata": [
            {
              "name": "CURRENT_STACK",
              "value": "dotnet"
            }
          ]
        },
        "clientAffinityEnabled": false,
        "httpsOnly": true,
        "minTlsVersion": "1.2"
      },
      "resources": [
        {
          // Application settings
          "apiVersion": "2020-09-01",
          "type": "Microsoft.Web/sites/config",
          "name": "[concat(variables('webSiteName'), '/appsettings')]", //nested resource name must include parent
          "comments": "Application settings",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/', variables('webSiteName'))]",
            "[resourceId('Microsoft.Insights/Components/', variables('appInsight'))]"
          ],
          "properties": {
            "WEBSITE_TIME_ZONE": "[concat('W. Europe Standard Time')]",
            "ASPNETCORE_ENVIRONMENT": "[parameters('environment')]",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('appInsight')), '2020-02-02-preview').InstrumentationKey]"
          }
        }
      ]
    },
    //Application insights
    {
      "apiVersion": "2020-02-02-preview",
      "name": "[variables('appInsight')]",
      "type": "Microsoft.Insights/components",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/', variables('apiName'))]",
        "[resourceId('Microsoft.Web/sites/', variables('webSiteName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('apiName'))]": "Resource",
        "displayName": "AppInsightsComponent"
      },
      "properties": {
        "ApplicationId": "[variables('apiName')]"
      }
    },
    //storage
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageSettings').name]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "[variables('storageSettings').type]",
        "tier": "[variables('storageSettings').tier]"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    //storage settings
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageSettings').name, '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageSettings').name)]"
      ],
      "properties": {
        "cors": {
          "corsRules": [
            {
              "allowedOrigins": [
                "*" //todo dit specifieker maken
              ],
              "allowedMethods": [
                "GET",
                "OPTIONS"
              ],
              "maxAgeInSeconds": "200",
              "exposedHeaders": [
                "*"
              ],
              "allowedHeaders": [
                "*"
              ]
            }
          ]
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    //storage settings WEB 
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageSettings').name, '/default/$web')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageSettings').name, 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageSettings').name)]"
      ],
      "properties": {
        "publicAccess": "None"
      }
    },
    //storage settings B2C
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageSettings').name, '/default/azureb2c')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageSettings').name, 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageSettings').name)]"
      ],
      "properties": {
        "publicAccess": "Blob"
      }
    },

    // KeyVault
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[variables('keyVaultSettings').name]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/Sites', variables('apiName'))]"
      ],
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "478ed763-46f3-44a9-a637-958652febd57", 
            "permissions": {
              "keys": [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore"
              ],
              "secrets": [
                "Get",
                "List",
                "Set",
                "Delete",
                "Recover",
                "Backup",
                "Restore"
              ],
              "certificates": [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore",
                "ManageContacts",
                "ManageIssuers",
                "GetIssuers",
                "ListIssuers",
                "SetIssuers",
                "DeleteIssuers"
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "478ed763-46f3-44a9-a637-958652febd57",
            "permissions": {
              "keys": [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore"
              ],
              "secrets": [
                "Get",
                "List",
                "Set",
                "Delete",
                "Recover",
                "Backup",
                "Restore"
              ],
              "certificates": [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore",
                "ManageContacts",
                "ManageIssuers",
                "GetIssuers",
                "ListIssuers",
                "SetIssuers",
                "DeleteIssuers"
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('apiName')),'2020-09-01', 'full').identity.principalId]",
            "permissions": {
              "keys": [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore"
              ],
              "secrets": [
                "Get",
                "List",
                "Set",
                "Delete",
                "Recover",
                "Backup",
                "Restore"
              ],
              "certificates": [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore",
                "ManageContacts",
                "ManageIssuers",
                "GetIssuers",
                "ListIssuers",
                "SetIssuers",
                "DeleteIssuers"
              ]
            }
          }
        ],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true,
        "enableSoftDelete": true,
        "createMode": "default",
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    },
    
    //KeyVaultSecrets
    //database secret
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "name": "[concat(variables('keyVaultSettings').name, '/ConnectionStrings--RoosterPlannerDatabase')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[concat('Server=tcp:', reference(resourceId('Microsoft.Sql/servers/', variables('databaseSettings').sqlserverName)).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('databaseSettings').name, ';Persist Security Info=False;User ID=', parameters('administratorLogin'), '@', variables('databaseSettings').sqlserverName, ';Password=', parameters('administratorLoginPassword'), ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
      }
    },
    //blobstorage secret
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "name": "[concat(variables('keyVaultSettings').name, '/AzureBlob--AzureBlobConnectionstring')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageSettings').name, ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts/', variables('storageSettings').name), '2019-04-01').keys[0].value)]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "name": "[concat(variables('keyVaultSettings').name, '/Database--Password')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[parameters('administratorLoginPassword')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "name": "[concat(variables('keyVaultSettings').name, '/KeyVaultName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[variables('keyVaultSettings').name]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "name": "[concat(variables('keyVaultSettings').name, '/ApplicationInsight--InstrumentationKey')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsight')), '2020-02-02-preview').InstrumentationKey]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "name": "[concat(variables('keyVaultSettings').name, '/ApplicationInsight--ConnectionString')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[concat('InstrumentationKey=',reference(resourceId('Microsoft.Insights/components', variables('appInsight')), '2020-02-02-preview').InstrumentationKey,';IngestionEndpoint=https://westeurope-0.in.applicationinsights.azure.com/')]"
      }
    }
    
    //todo manually add secrets from AzureAd B2C (zou ook met pwsh kunnen??)
  ]

}