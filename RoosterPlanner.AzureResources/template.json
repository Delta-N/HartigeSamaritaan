{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  
  "parameters": {
    "hostingPlan": {
      "type": "string",
      "minLength": 1
    },
    "environment": {
      "type": "string",
      "minLength": 3,
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "tst",
        "prd"
      ]
    },
    "skuName": {
      "type": "string",
      "defaultValue": "F1",
      "allowedValues": [
        "F1",
        "D1",
        "B1",
        "B2",
        "B3",
        "S1"
      ],
      "metadata": {
        "description": "Describes plan's pricing tier and instance size. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
      }
    },
    "skuCapacity": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "metadata": {
        "description": "Describes plan's instance count"
      }
    },
    "administratorLogin": {
      "type": "string"
    },
    "administratorLoginPassword": {
      "type": "securestring"
    },
    "database": {
      "type": "string"
    },
    "collation": {
      "type": "string",
      "defaultValue": "SQL_Latin1_General_CP1_CI_AS"
    },
    "edition": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard"
      ]
    },
    "maxSizeBytes": {
      "type": "string",
      "defaultValue": "1073741824"
    },
    "requestedServiceObjectiveName": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "S0",
        "S1",
        "S2"
      ],
      "metadata": {
        "description": "Describes the performance level for Edition"
      }
    }
  },
  
  "variables": {
    "apiName": "[concat('roosterplanner-api-', parameters('environment'))]",
    "webSiteName": "[concat('roosterplanner-web-', parameters('environment'))]",
    "sqlserverName": "[concat('roosterplanner-sqlserver-', parameters('environment'))]",
    "keyvaultName": "[concat('roosterplanner4-kv-', parameters('environment'))]", //todo naam aanpassen als soft delete klaar is
    "storageName": "[concat('roosterplannerstorage', parameters('environment'))]",
    "appInsight": "[concat('roosterplanner-insights-', parameters('environment'))]",
    "hostingPlanName": "[concat(parameters('hostingPlan'), parameters('environment'))]",
    "databaseName": "[concat(parameters('database'), parameters('environment'))]",
   
    // KeyVault
    "keyVaultSettings": {
      "name": "[variables('keyvaultName')]"
    },
    // ServicePlan
    "servicePlanTierEnvironment": {
      "dev": "Free",
      "tst": "Free",
      "prd": "Standard"
    },
    "servicePlanSizeEnvironment": {
      "dev": "F1",
      "tst": "F1",
      "prd": "S1"
    },
    "servicePlanFamilyEnvironment": {
      "dev": "F",
      "tst": "F",
      "prd": "S"
    },
    "servicePlanCapacity": {
      "dev": "1",
      "tst": "1",
      "prd": "1"
    },
    "servicePlan": {
      "SKUTier": "[variables('servicePlanTierEnvironment')[parameters('environment')]]",
      "SKUSize": "[variables('servicePlanSizeEnvironment')[parameters('environment')]]",
      "SKUFamily": "[variables('servicePlanFamilyEnvironment')[parameters('environment')]]",
      "SKUCapacity": "[variables('servicePlanCapacity')[parameters('environment')]]"
    },
    
    // Webapplication
    "webApplicationAlwaysOn": {
      "dev": false,      //not available in Free service plan
      "tst": false,      //not available in Free service plan
      "prd": true
    },
    
    "webApplication": {
      "alwaysOn": "[variables('webApplicationAlwaysOn')[parameters('environment')]]"
    },
    
    //manually add custom domain in the portal
    "cors": {
      "dev": "[concat('https://', variables('webSiteName'), '.', 'azurewebsites.net')]",
      "tst": "[concat('https://', variables('webSiteName'), '.', 'azurewebsites.net')]",
      "prd": "[concat('https://', variables('webSiteName'), '.', 'azurewebsites.net')]"
    }
  },
  
  "resources": [
    //sqlserver
    {
      "name": "[variables('sqlserverName')]",
      "type": "Microsoft.Sql/servers",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "SqlServer"
      },
      "apiVersion": "2014-04-01-preview",
      "properties": {
        "administratorLogin": "[parameters('administratorLogin')]",
        "administratorLoginPassword": "[parameters('administratorLoginPassword')]"
      },
      "resources": [
        {
          "name": "[variables('databaseName')]",
          "type": "databases",
          "location": "[resourceGroup().location]",
          "tags": {
            "displayName": "Database"
          },
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers/', variables('sqlserverName'))]"
          ],
          "properties": {
            "edition": "[parameters('edition')]",
            "collation": "[parameters('collation')]",
            "maxSizeBytes": "[parameters('maxSizeBytes')]",
            "requestedServiceObjectiveName": "[parameters('requestedServiceObjectiveName')]"
          }
        },
        {
          "type": "firewallrules",
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers/', variables('sqlserverName'))]"
          ],
          "location": "[resourceGroup().location]",
          "name": "AllowAllWindowsAzureIps",
          "properties": {
            "endIpAddress": "0.0.0.0",
            "startIpAddress": "0.0.0.0"
          }
        }
      ]
    },
    //hosting plan
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('hostingPlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "HostingPlan"
      },
      "sku": {
        "name": "[variables('servicePlan').SKUSize]",
        "tier": "[variables('servicePlan').SKUTier]",
        "size": "[variables('servicePlan').SKUSize]",
        "family": "[variables('servicePlan').SKUFamily]",
        "capacity": "[variables('servicePlan').SKUCapacity]"
      },
      "properties": {
        "name": "[variables('hostingPlanName')]",
        "numberOfWorkers": 1
      }
    },
    //api
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('apiName')]",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverFarms/', variables('hostingPlanName'))]"
      ],
      "tags": {
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "empty",
        "displayName": "Api"
      },
      "properties": {
        "name": "[variables('apiName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "alwaysOn": "[variables('webApplication').alwaysOn]",
          "cors": {
            "allowedOrigins": [
              "[variables('cors')[parameters('environment')]]"
            ],
            "supportCredentials": true
          },
          "netFrameworkVersion": "v5.0"
        }
      },
      "resources": [
        {
          // Application settings
          "apiVersion": "2018-11-01",
          "type": "Microsoft.Web/sites/config",
          "name": "[concat(variables('apiName'), '/appsettings')]",
          //nested resource name must include parent
          "comments": "Application settings",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/', variables('apiName'))]",
            "[resourceId('Microsoft.Insights/Components/', variables('appInsight'))]"
          ],
          "properties": {
            "WEBSITE_TIME_ZONE": "[concat('W. Europe Standard Time')]",
            "ASPNETCORE_ENVIRONMENT": "[parameters('environment')]",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('appInsight')), '2015-05-01').InstrumentationKey]"
          }
        }
      ]
    },
    //website
    {
      "apiVersion": "2018-11-01",
      "name": "[variables('webSiteName')]",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverFarms/', variables('hostingPlanName'))]"
      ],
      "tags": {
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "empty",
        "displayName": "Website"
      },
      "properties": {
        "name": "[variables('webSiteName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "alwaysOn": "[variables('webApplication').alwaysOn]",
          "netFrameworkVersion": "v5.0"
        }
      },
      "resources": [
        {
          // Application settings
          "apiVersion": "2018-11-01",
          "type": "Microsoft.Web/sites/config",
          "name": "[concat(variables('webSiteName'), '/appsettings')]", //nested resource name must include parent
          "comments": "Application settings",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/', variables('webSiteName'))]",
            "[resourceId('Microsoft.Insights/Components/', variables('appInsight'))]"
          ],
          "properties": {
            "WEBSITE_TIME_ZONE": "[concat('W. Europe Standard Time')]",
            "ASPNETCORE_ENVIRONMENT": "[parameters('environment')]",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('appInsight')), '2015-05-01').InstrumentationKey]"
          }
        }
      ]
    },
    //hosting plan settings
    {
      "apiVersion": "2014-04-01",
      "name": "[concat(variables('hostingPlanName'), '-', resourceGroup().name)]",
      "type": "Microsoft.Insights/autoscalesettings",
      "location": "[resourceGroup().location]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "Resource",
        "displayName": "AutoScaleSettings"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
      ],
      "properties": {
        "profiles": [
          {
            "name": "Default",
            "capacity": {
              "minimum": 1,
              "maximum": 2,
              "default": 1
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 80.0
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT10M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT1H",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": 60.0
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT1H"
                }
              }
            ]
          }
        ],
        "enabled": false,
        "name": "[concat(variables('hostingPlanName'), '-', resourceGroup().name)]",
        "targetResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
      }
    },
    //Application insights
    {
      "apiVersion": "2015-05-01",
      "name": "[variables('appInsight')]",
      "type": "Microsoft.Insights/components",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/', variables('apiName'))]",
        "[resourceId('Microsoft.Web/sites/', variables('webSiteName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('apiName'))]": "Resource",
        "displayName": "AppInsightsComponent"
      },
      "properties": {
        "ApplicationId": "[variables('apiName')]"
      }
    },
    //storage
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-04-01",
      "name": "[variables('storageName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    //storage settings
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-04-01",
      "name": "[concat(variables('storageName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": [
            {
              "allowedOrigins": [
                "*"
              ],
              "allowedMethods": [
                "GET",
                "OPTIONS"
              ],
              "maxAgeInSeconds": 0,
              "exposedHeaders": [
                "*"
              ],
              "allowedHeaders": [
                "*"
              ]
            }
          ]
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    //storage settings
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-04-01",
      "name": "[concat(variables('storageName'), '/default/$web')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ],
      "properties": {
        "publicAccess": "None"
      }
    },
    //storage settings
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-04-01",
      "name": "[concat(variables('storageName'), '/default/azureb2c')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ],
      "properties": {
        "publicAccess": "Blob"
      }
    },

    // KeyVault
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[variables('keyVaultSettings').name]",
      "location": "[resourceGroup().location]",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "accessPolicies": [
          //manually add api,
        ],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "​​​enabledForTemplateDeployment": true,
        "enableSoftDelete": true,
        "createMode": "default",
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    },
    
    //KeyVaultSecrets
    //database secret
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "name": "[concat(variables('keyVaultSettings').name, '/ConnectionStrings--RoosterPlannerDatabase')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[concat('Server=tcp:', reference(resourceId('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('databaseName'), ';Persist Security Info=False;User ID=', parameters('administratorLogin'), '@', variables('sqlserverName'), ';Password=', parameters('administratorLoginPassword'), ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
      }
    },
    //blobstorage secret
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "name": "[concat(variables('keyVaultSettings').name, '/AzureBlob--AzureBlobConnectionstring')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts/', variables('storageName')), '2019-04-01').keys[0].value)]"
      }
    }
    
    //todo manually add secrets from AzureAd B2C
  ]
}