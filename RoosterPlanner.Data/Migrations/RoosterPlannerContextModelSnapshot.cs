// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoosterPlanner.Data.Context;

namespace RoosterPlanner.Data.Migrations
{
    [DbContext(typeof(RoosterPlannerContext))]
    partial class RoosterPlannerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("RoosterPlanner.Models.Availability", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("LastEditDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ParticipationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Preference")
                        .HasColumnType("bit");

                    b.Property<bool>("PushEmailSend")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParticipationId");

                    b.HasIndex("ShiftId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("LastEditDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd065d8a-c6f2-4ec5-84fd-92636f52f309"),
                            Code = "KEUKEN",
                            LastEditBy = "SYSTEM",
                            LastEditDate = new DateTime(2021, 1, 5, 8, 10, 52, 827, DateTimeKind.Local).AddTicks(6592),
                            Name = "Keuken"
                        },
                        new
                        {
                            Id = new Guid("4c23384e-76bd-4957-a7e7-2ba9bd44dc00"),
                            Code = "BEDIENING",
                            LastEditBy = "SYSTEM",
                            LastEditDate = new DateTime(2021, 1, 5, 8, 10, 52, 827, DateTimeKind.Local).AddTicks(6887),
                            Name = "Bediening"
                        },
                        new
                        {
                            Id = new Guid("c547a3d4-f726-4db8-bd40-8c27c5e8cb05"),
                            Code = "LOGISTIEK",
                            LastEditBy = "SYSTEM",
                            LastEditDate = new DateTime(2021, 1, 5, 8, 10, 52, 827, DateTimeKind.Local).AddTicks(6905),
                            Name = "Logistiek"
                        },
                        new
                        {
                            Id = new Guid("ba35a8ac-5f2a-4e67-9146-63f62ade6ad2"),
                            Code = "OVERIGE",
                            LastEditBy = "SYSTEM",
                            LastEditDate = new DateTime(2021, 1, 5, 8, 10, 52, 827, DateTimeKind.Local).AddTicks(6913),
                            Name = "Overige"
                        });
                });

            modelBuilder.Entity("RoosterPlanner.Models.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CertificateTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("LastEditDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CertificateTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("RoosterPlanner.Models.CertificateType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("LastEditDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Level")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("CertificateTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f117190b-4f09-4f36-9538-6fe08de42334"),
                            LastEditBy = "SYSTEM",
                            LastEditDate = new DateTime(2021, 1, 5, 8, 10, 52, 830, DateTimeKind.Local).AddTicks(8741),
                            Name = "Biefstuk-capable"
                        },
                        new
                        {
                            Id = new Guid("9d0f0d8d-15c7-4b72-a991-f27495faa546"),
                            LastEditBy = "SYSTEM",
                            LastEditDate = new DateTime(2021, 1, 5, 8, 10, 52, 830, DateTimeKind.Local).AddTicks(9099),
                            Level = "B",
                            Name = "Rijbewijs"
                        },
                        new
                        {
                            Id = new Guid("53ed34cf-0bb9-4534-9e4a-8e358955adbd"),
                            LastEditBy = "SYSTEM",
                            LastEditDate = new DateTime(2021, 1, 5, 8, 10, 52, 830, DateTimeKind.Local).AddTicks(9116),
                            Name = "Barcertificaat"
                        },
                        new
                        {
                            Id = new Guid("58bf35fe-b73d-4258-92a3-a8f70befaf09"),
                            LastEditBy = "SYSTEM",
                            LastEditDate = new DateTime(2021, 1, 5, 8, 10, 52, 830, DateTimeKind.Local).AddTicks(9122),
                            Name = "HACCP"
                        });
                });

            modelBuilder.Entity("RoosterPlanner.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentUri")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("LastEditDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7fff7993-8a1b-4c2f-90ad-2e71c144cfa5"),
                            DocumentUri = "https://hackatonstoragedev.blob.core.windows.net/projectpicture/037efc9a-0836-4513-8ae3-282c597631c4.jfif",
                            LastEditBy = "SYSTEM",
                            LastEditDate = new DateTime(2021, 1, 5, 8, 10, 52, 830, DateTimeKind.Local).AddTicks(4722),
                            Name = "TermsOfService"
                        });
                });

            modelBuilder.Entity("RoosterPlanner.Models.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("LastEditDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Participation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("LastEditDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MaxWorkingHoursPerWeek")
                        .HasColumnType("int");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remark")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Participations");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("LastEditDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PersonalRemark")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("PushDisabled")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("StaffRemark")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Oid")
                        .IsUnique();

                    b.HasIndex("ProfilePictureId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("City")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("LastEditDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("ParticipationEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ParticipationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PictureUriId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ProjectEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ProjectStartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PictureUriId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e86bb765-27ab-404f-b140-211505d869fe"),
                            Address = "Stationsplein 2",
                            City = "Voorburg",
                            Closed = false,
                            Description = "Leuk project in Voorburg",
                            LastEditBy = "SYSTEM",
                            LastEditDate = new DateTime(2021, 1, 5, 8, 10, 52, 829, DateTimeKind.Local).AddTicks(3344),
                            Name = "Voorburg 2020",
                            ParticipationEndDate = new DateTime(2021, 2, 3, 8, 10, 52, 829, DateTimeKind.Local).AddTicks(2661),
                            ParticipationStartDate = new DateTime(2021, 1, 6, 8, 10, 52, 829, DateTimeKind.Local).AddTicks(2391),
                            ProjectEndDate = new DateTime(2021, 2, 4, 8, 10, 52, 829, DateTimeKind.Local).AddTicks(3144),
                            ProjectStartDate = new DateTime(2021, 1, 5, 8, 10, 52, 829, DateTimeKind.Local).AddTicks(2920)
                        },
                        new
                        {
                            Id = new Guid("55c92c6a-067b-442a-b33d-b8ce35cf1d8a"),
                            Address = "Laan van Waalhaven 450",
                            City = "Den Haag",
                            Closed = false,
                            Description = "Leuk project in Den Haag",
                            LastEditBy = "SYSTEM",
                            LastEditDate = new DateTime(2021, 1, 5, 8, 10, 52, 829, DateTimeKind.Local).AddTicks(3442),
                            Name = "Den Haag 2018",
                            ParticipationEndDate = new DateTime(2021, 2, 3, 8, 10, 52, 829, DateTimeKind.Local).AddTicks(3431),
                            ParticipationStartDate = new DateTime(2021, 1, 6, 8, 10, 52, 829, DateTimeKind.Local).AddTicks(3426),
                            ProjectEndDate = new DateTime(2021, 2, 4, 8, 10, 52, 829, DateTimeKind.Local).AddTicks(3438),
                            ProjectStartDate = new DateTime(2021, 1, 5, 8, 10, 52, 829, DateTimeKind.Local).AddTicks(3435)
                        });
                });

            modelBuilder.Entity("RoosterPlanner.Models.ProjectTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("LastEditDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("LastEditDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ParticipantsRequired")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("InstructionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("LastEditDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InstructionId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("026149d8-1d01-4380-b9d2-fc2576518c5a"),
                            CategoryId = new Guid("bd065d8a-c6f2-4ec5-84fd-92636f52f309"),
                            Color = "Blue",
                            Description = "Een leuke beschrijving van de werkzaamheden van een chef",
                            LastEditBy = "SYSTEM",
                            LastEditDate = new DateTime(2021, 1, 5, 8, 10, 52, 830, DateTimeKind.Local).AddTicks(801),
                            Name = "Chef"
                        },
                        new
                        {
                            Id = new Guid("bee3d875-418d-46fb-92b0-917cd41bfec3"),
                            CategoryId = new Guid("4c23384e-76bd-4957-a7e7-2ba9bd44dc00"),
                            Color = "Red",
                            Description = "Een leuke beschrijving van de werkzaamheden van een runner",
                            LastEditBy = "SYSTEM",
                            LastEditDate = new DateTime(2021, 1, 5, 8, 10, 52, 830, DateTimeKind.Local).AddTicks(861),
                            Name = "Runner"
                        },
                        new
                        {
                            Id = new Guid("31f8801c-95ec-4a26-97ee-631052898fdd"),
                            CategoryId = new Guid("c547a3d4-f726-4db8-bd40-8c27c5e8cb05"),
                            Color = "Yellow",
                            Description = "Een leuke beschrijving van de werkzaamheden van een chauffeur",
                            LastEditBy = "SYSTEM",
                            LastEditDate = new DateTime(2021, 1, 5, 8, 10, 52, 830, DateTimeKind.Local).AddTicks(877),
                            Name = "Chauffeur"
                        },
                        new
                        {
                            Id = new Guid("7edba13d-3cf3-4eeb-abe9-af1d2ff4104b"),
                            CategoryId = new Guid("ba35a8ac-5f2a-4e67-9146-63f62ade6ad2"),
                            Color = "Green",
                            Description = "Een leuke beschrijving van de werkzaamheden van een klusser",
                            LastEditBy = "SYSTEM",
                            LastEditDate = new DateTime(2021, 1, 5, 8, 10, 52, 830, DateTimeKind.Local).AddTicks(901),
                            Name = "Klusser"
                        });
                });

            modelBuilder.Entity("RoosterPlanner.Models.Availability", b =>
                {
                    b.HasOne("RoosterPlanner.Models.Participation", "Participation")
                        .WithMany("Availabilities")
                        .HasForeignKey("ParticipationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RoosterPlanner.Models.Shift", "Shift")
                        .WithMany("Availabilities")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participation");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Certificate", b =>
                {
                    b.HasOne("RoosterPlanner.Models.CertificateType", "CertificateType")
                        .WithMany("Certificates")
                        .HasForeignKey("CertificateTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RoosterPlanner.Models.Person", "Person")
                        .WithMany("Certificates")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificateType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Manager", b =>
                {
                    b.HasOne("RoosterPlanner.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoosterPlanner.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Participation", b =>
                {
                    b.HasOne("RoosterPlanner.Models.Person", "Person")
                        .WithMany("Participations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoosterPlanner.Models.Project", "Project")
                        .WithMany("Participations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Person", b =>
                {
                    b.HasOne("RoosterPlanner.Models.Document", "ProfilePicture")
                        .WithMany("ProfilePictures")
                        .HasForeignKey("ProfilePictureId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Project", b =>
                {
                    b.HasOne("RoosterPlanner.Models.Document", "PictureUri")
                        .WithMany("ProjectPictures")
                        .HasForeignKey("PictureUriId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PictureUri");
                });

            modelBuilder.Entity("RoosterPlanner.Models.ProjectTask", b =>
                {
                    b.HasOne("RoosterPlanner.Models.Project", "Project")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoosterPlanner.Models.Task", "Task")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Shift", b =>
                {
                    b.HasOne("RoosterPlanner.Models.Project", "Project")
                        .WithMany("Shifts")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoosterPlanner.Models.Task", "Task")
                        .WithMany("Shifts")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Project");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Task", b =>
                {
                    b.HasOne("RoosterPlanner.Models.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RoosterPlanner.Models.Document", "Instruction")
                        .WithMany("Instructions")
                        .HasForeignKey("InstructionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Instruction");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Category", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("RoosterPlanner.Models.CertificateType", b =>
                {
                    b.Navigation("Certificates");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Document", b =>
                {
                    b.Navigation("Instructions");

                    b.Navigation("ProfilePictures");

                    b.Navigation("ProjectPictures");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Participation", b =>
                {
                    b.Navigation("Availabilities");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Person", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Participations");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Project", b =>
                {
                    b.Navigation("Participations");

                    b.Navigation("ProjectTasks");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Shift", b =>
                {
                    b.Navigation("Availabilities");
                });

            modelBuilder.Entity("RoosterPlanner.Models.Task", b =>
                {
                    b.Navigation("ProjectTasks");

                    b.Navigation("Shifts");
                });
#pragma warning restore 612, 618
        }
    }
}
